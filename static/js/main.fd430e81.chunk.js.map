{"version":3,"sources":["functions/modal/Modal.js","components/modal/Modal.js","pages/modal/Modal.js","pages/home/Home.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["useModal","initialVisible","useState","visible","updateVisible","showModal","hideModal","Modal","children","TransitionContainer","CSSTransition","in","timeout","unmountOnExit","classNames","state","ModalContainer","ModalView","className","styled","div","Style","document","body","style","overflow","onClick","Home","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"0RAgBeA,MAdf,WAA2C,IAAzBC,EAAwB,0DACLC,mBAASD,GADJ,mBAC/BE,EAD+B,KACtBC,EADsB,KAGtC,SAASC,IACLD,GAAc,GAGlB,SAASE,IACLF,GAAc,GAGlB,MAAO,CAAED,UAASE,YAAWC,c,2xCCTjC,IAmBeC,EAnBD,SAAC,GAA2B,IAAzBJ,EAAwB,EAAxBA,QAASK,EAAe,EAAfA,SACtB,OACI,gBAACC,EAAD,KACI,gBAACC,EAAA,EAAD,CACIC,GAAIR,EACJS,QAAS,IACTC,eAAa,EACbC,WAAW,UAEd,SAAAC,GAAK,OACF,gBAACC,EAAD,KACA,gBAACC,EAAD,CAAWC,UAAU,cAAcV,SAW7CQ,EAAiBG,IAAOC,IAAV,KAadH,EAAYE,IAAOC,IAAV,KAYTX,EAAsBU,IAAOC,IAAV,K,mZC9CzB,IAWMC,EAAQF,IAAOC,IAAV,KAmBIb,EA9BD,SAAC,GAA4B,IAA1BJ,EAAyB,EAAzBA,QAASG,EAAgB,EAAhBA,UAEtB,OADUgB,SAASC,KAAKC,MAAMC,SAA9BtB,EAAyC,SAA0C,OAE/E,kBAACkB,EAAD,KACI,kBAAC,EAAD,CAAgBlB,QAASA,GACrB,yBAAKe,UAAU,SAASQ,QAAS,kBAAMpB,MAAvC,Y,2WCOhB,IAAMe,EAAQF,IAAOC,IAAV,KAiBIO,EA5Bf,WAAiB,IAAD,EAC8BpB,IAAlCF,EADI,EACJA,UAAWC,EADP,EACOA,UAAWH,EADlB,EACkBA,QAE9B,OACI,kBAAC,EAAD,KACI,yBAAKuB,QAAS,kBAAKrB,KAAca,UAAU,UAA3C,eACA,kBAAC,EAAD,CAAgBZ,UAAWA,EAAWH,QAASA,MCK5CyB,MAXf,WACE,OACE,yBAAKV,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKW,IAAKC,IAAMZ,UAAU,WAAWa,IAAI,SACzC,kBAAC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFhB,SAASiB,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.fd430e81.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nfunction useModal(initialVisible = false) {\r\n    const [visible, updateVisible] = useState(initialVisible);\r\n\r\n    function showModal() {\r\n        updateVisible(true);\r\n    }\r\n\r\n    function hideModal() {\r\n        updateVisible(false);\r\n    }\r\n\r\n    return { visible, showModal, hideModal };\r\n}\r\n\r\nexport default useModal;","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst Modal = ({ visible, children }) => {\r\n    return (\r\n        <TransitionContainer>\r\n            <CSSTransition\r\n                in={visible}\r\n                timeout={400}\r\n                unmountOnExit\r\n                classNames=\"modal\"\r\n            >\r\n            {state => (\r\n                <ModalContainer>\r\n                <ModalView className=\"modal-view\">{children}</ModalView>\r\n                </ModalContainer>\r\n            )}\r\n            </CSSTransition>\r\n        </TransitionContainer>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n\r\n\r\nconst ModalContainer = styled.div`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    backdrop-filter: blur(2px);\r\n    display: flex;\r\n    z-index: 6;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nconst ModalView = styled.div`\r\n    background-color: #fff;\r\n    /* change the width and get out the height */\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: auto;\r\n    padding: 2rem;\r\n    box-shadow: 10px 10px 10px #979797;\r\n    transition: all 300ms ease-out;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst TransitionContainer = styled.div`\r\n    .modal-enter {\r\n        opacity: 0.01;\r\n\r\n        .modal-view {\r\n        transform: scale(0.9) translateY(0%);\r\n        }\r\n    }\r\n    .modal-enter-active {\r\n        opacity: 1;\r\n        transition: all 300ms ease-out;\r\n\r\n        .modal-view {\r\n        transform: scale(1) translateY(0%);\r\n        }\r\n    }\r\n    .modal-exit {\r\n        opacity: 1;\r\n\r\n        .modal-view {\r\n        transform: scale(1) translateY(20%);\r\n        }\r\n    }\r\n    .modal-exit-active {\r\n        opacity: 0.01;\r\n        transition: all 300ms ease-out;\r\n        .modal-view {\r\n        transform: scale(0.9) translateY(0%);\r\n        }\r\n    }\r\n`;\r\n\r\n","import React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\nimport ModalComponent from \"../../components/modal/Modal\";\r\n\r\nconst Modal = ({ visible, hideModal }) => {\r\n    visible ? document.body.style.overflow = 'hidden' : document.body.style.overflow = 'auto'\r\n    return (\r\n        <Style>\r\n            <ModalComponent visible={visible}>\r\n                <div className=\"button\" onClick={() => hideModal()}>Close</div>\r\n            </ModalComponent>\r\n        </Style>\r\n    );\r\n};\r\n\r\nconst Style = styled.div`\r\n.button {\r\n    margin-top:20px;\r\n    float: right;\r\n    height: 24px;\r\n    width: 180px;\r\n    border: 1px solid #979797;\r\n    border-radius: 15px;\r\n    background-color: #000;\r\n    color: #979797;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #fff;\r\n        background-color: #979797;\r\n        border-color: #fff;\r\n    }\r\n}\r\n`;\r\n\r\nexport default Modal;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Modal from \"../../functions/modal/Modal\";\r\nimport ModalComponent from './../modal/Modal';\r\n\r\n\r\nfunction Home() {\r\n    const { showModal, hideModal, visible } = Modal();\r\n\r\n    return (\r\n        <Style>\r\n            <div onClick={()=> showModal() } className=\"button\">Click on me</div>\r\n            <ModalComponent hideModal={hideModal} visible={visible} />\r\n        </Style>\r\n    );\r\n}\r\n\r\nconst Style = styled.div`\r\n.button {\r\n    height: 33px;\r\n    width: 180px;\r\n    border: 1px solid #979797;\r\n    border-radius: 15px;\r\n    background-color: white;\r\n    color: #979797;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #fff;\r\n        background-color: #979797;\r\n        border-color: #fff;\r\n    }\r\n}\r\n`;\r\n\r\nexport default Home;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport Home from './pages/home/Home'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <Home/>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}